ðŸš€ Angular Course Enrollment System
This Angular app includes:
âœ… User Registration (Stores user data)
âœ… User Login (Authenticates users)
âœ… Profile Component (Displays user data after login)
âœ… LocalStorage (Stores users for persistence)
________________________________________
ðŸ“Œ 1. Install Angular (If Not Installed)
If you donâ€™t have Angular installed, run:
npm install -g @angular/cli
________________________________________
ðŸ“Œ 2. Create a New Angular Project
ng new course-enrollment
cd course-enrollment
ng add @angular/forms
ng generate component registration
ng generate component login
ng generate component profile
ng generate service auth
________________________________________
ðŸŽ¯ Project Structure
course-enrollment/
â”‚-- src/
â”‚   â”œâ”€â”€ app/
â”‚   â”‚   â”œâ”€â”€ registration/
â”‚   â”‚   â”œâ”€â”€ login/
â”‚   â”‚   â”œâ”€â”€ profile/
â”‚   â”‚   â”œâ”€â”€ auth.service.ts
â”‚   â”‚   â”œâ”€â”€ app-routing.module.ts
â”‚   â”‚   â”œâ”€â”€ app.component.ts
â”‚   â”‚   â”œâ”€â”€ app.module.ts
________________________________________
ðŸ“Œ 3. Setup Routing in app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RegistrationComponent } from './registration/registration.component';
import { LoginComponent } from './login/login.component';
import { ProfileComponent } from './profile/profile.component';

const routes: Routes = [
  { path: '', redirectTo: '/register', pathMatch: 'full' },
  { path: 'register', component: RegistrationComponent },
  { path: 'login', component: LoginComponent },
  { path: 'profile', component: ProfileComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
________________________________________
ðŸ“Œ 4. Create auth.service.ts (Authentication Service)
This service manages user registration, login, and session handling.
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedInUser: any = null;

  constructor() {}

  // Register a new user
  register(user: any) {
    let users = JSON.parse(localStorage.getItem('users') || '[]');
    users.push(user);
    localStorage.setItem('users', JSON.stringify(users));
  }

  // Login a user
  login(email: string, password: string): boolean {
    let users = JSON.parse(localStorage.getItem('users') || '[]');
    let user = users.find((u: any) => u.email === email && u.password === password);
    if (user) {
      this.loggedInUser = user;
      localStorage.setItem('loggedInUser', JSON.stringify(user));
      return true;
    }
    return false;
  }

  // Get logged-in user
  getLoggedInUser() {
    if (!this.loggedInUser) {
      this.loggedInUser = JSON.parse(localStorage.getItem('loggedInUser') || 'null');
    }
    return this.loggedInUser;
  }

  // Logout
  logout() {
    this.loggedInUser = null;
    localStorage.removeItem('loggedInUser');
  }
}
________________________________________
ðŸ“Œ 5. Create registration.component.ts
Handles user registration and stores data in localStorage.
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  registrationForm: FormGroup;

  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {
    this.registrationForm = this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required, Validators.minLength(6)]]
    });
  }

  onRegister() {
    if (this.registrationForm.valid) {
      this.authService.register(this.registrationForm.value);
      alert('Registration successful!');
      this.router.navigate(['/login']);
    }
  }
}
ðŸ“Œ 6. Create registration.component.html
<h2>Register</h2>
<form [formGroup]="registrationForm" (ngSubmit)="onRegister()">
  <input type="text" formControlName="name" placeholder="Full Name">
  <input type="email" formControlName="email" placeholder="Email">
  <input type="password" formControlName="password" placeholder="Password">
  <button type="submit" [disabled]="registrationForm.invalid">Register</button>
</form>
________________________________________
ðŸ“Œ 7. Create login.component.ts
Handles user login.
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { AuthService } from '../auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent {
  loginForm: FormGroup;
  errorMessage: string = '';

  constructor(private fb: FormBuilder, private authService: AuthService, private router: Router) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required]
    });
  }

  onLogin() {
    if (this.authService.login(this.loginForm.value.email, this.loginForm.value.password)) {
      this.router.navigate(['/profile']);
    } else {
      this.errorMessage = "Invalid email or password.";
    }
  }
}
ðŸ“Œ 8. Create login.component.html
<h2>Login</h2>
<form [formGroup]="loginForm" (ngSubmit)="onLogin()">
  <input type="email" formControlName="email" placeholder="Email">
  <input type="password" formControlName="password" placeholder="Password">
  <button type="submit" [disabled]="loginForm.invalid">Login</button>
</form>
<p class="error">{{ errorMessage }}</p>
________________________________________
ðŸ“Œ 9. Create profile.component.ts
Displays user details after login.
import { Component } from '@angular/core';
import { AuthService } from '../auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-profile',
  templateUrl: './profile.component.html',
  styleUrls: ['./profile.component.css']
})
export class ProfileComponent {
  user: any;

  constructor(private authService: AuthService, private router: Router) {
    this.user = this.authService.getLoggedInUser();
    if (!this.user) {
      this.router.navigate(['/login']);
    }
  }

  logout() {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}
ðŸ“Œ 10. Create profile.component.html
<h2>Welcome, {{ user?.name }}</h2>
<p>Email: {{ user?.email }}</p>
<button (click)="logout()">Logout</button>
________________________________________
ðŸ“Œ 11. Register Components in app.module.ts
Make sure you import FormsModule and ReactiveFormsModule:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { AppComponent } from './app.component';
import { RegistrationComponent } from './registration/registration.component';
import { LoginComponent } from './login/login.component';
import { ProfileComponent } from './profile/profile.component';

@NgModule({
  declarations: [
    AppComponent,
    RegistrationComponent,
    LoginComponent,
    ProfileComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
________________________________________
ðŸ“Œ 12. Run the App
ng serve
âœ… Open http://localhost:4200/ ðŸŽ‰
________________________________________

